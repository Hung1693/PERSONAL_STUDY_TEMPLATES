1. CREATE REACT COMPONENT
	 A. function: const App = () => (<html></html>) || const App = () => {return (html)}

2. RENDER
	 A. ReactDom.render(componentInstance, DOMElement).
		  EX: ReactDom.render(<APP />, document.getElementById("id"));

3. props
	A. is a super object in ReactDOM (that means we can access the same props from any class in the same file) to pass in components as argument, read-only
	 ***Always put dynamic value and variable and console.log() inside {}
	 EX:  const TodoList = (props) => (
		  ul
				li {props.todo[index]} /li
		  /ul
	 )
	 //props will be an object
		  const App = () => (
				//pass todo to props in componentInstance
				<TodoList todo={[]} />
		  )
	B. <App *everything here is inside props* />
		  EX: <App array = {[1,2,3]}>. To access array: props.array

	C. props.children: built-in property

4. state
	A. State is a built-in react object
	B. Allow managing data changing
	C. Without useState() hook, only class component can use state
	D. State is declared in constructor:
		  EX: class ListItem extends React.Component{
				constructor(props){
					 super(props)
					 this.state = {};
				}
		  }

5. this.setState()
	 A. is a built-in function to update state

6. IMMUTABILITY IS IMPORTANT (make a copy of state or props without changeling original)
	 A. Keep original data => user later (ex: undo feature)
	 B. Detecting changes
	 C. When we need to re-render after props or state change, we compare nextProps or nextState in shouldComponentUpdate()
		  EX: shouldComponentUpdate(nextProps, nextState) {
					 if (this.props.color !== nextProps.color) {
						  return true;
					 }
					 if (this.state.count !== nextState.count) {
						  return true;
					 }
					 return false;
				}

7. key={id}: ex: <li key={user.id}>{user.name}: {user.taskCount} tasks left</li>
	A. key is not belonging to props (can't use this.props.key)
	B. use array index to set key is not recommended
	C. key do not need to be globally unique, only need to be unique between components and their siblings

8. LIFTING STATE UP
	A. If a state need to use in different children components, we should lift it up to parent comp 

9. ARRAY COPY:
	A. Use .slice() if array contain "words"
	B. Use [...] if array contains number only.

10. useState hook: 
	A. stateless functional component: no state
	B. stateful functional component: state
	C. useState() is a an array: 
		ex: const [on, setOn] = useState(false);
		==> useState[0] = on = false
			useState[1] = setOn() 
	E. stale state: the state not updated corresponding with event. To avoid, use callback in setState().
		EX: const [count, setCount] = useState(0);
    		const increment = () => {
        	setTimeout(()=> {setCount(count => count+1)}, 1000)
    }
11. RULE OF HOOKS
	A. Can't be placed in function handler, if, loop.
	B. Should be placed at top inside the component